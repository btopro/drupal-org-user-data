<?php
// @file allow for harvesting relevent data from drupal.org to show impact

define('DRUPAL_ORG_NAME_PATH', 'http://drupal.org/u/');
define('DRUPAL_ORG_USER_PATH', 'http://drupal.org/user/');

define('DRUPAL_ORG_MAX_PER_BUILD', 10);

/**
 * Implements hook_cron().
 */
function drupal_org_user_data_cron() {
  // @todo provide option via UI to purge on this
  //drupal_org_invalidate_cache();
}

/**
 * Implements hook_flush_caches().
 */
function drupal_org_user_data_flush_caches() {
  return array('cache_drupal_org_user_data');
}

/**
 * wrapper to clean up caches
 * @return [type] [description]
 */
function drupal_org_invalidate_cache() {
  cache_clear_all('*', 'cache_drupal_org_user_data', TRUE);
}

/**
 * Implements hook_permission().
 */
function drupal_org_user_data_permission() {
  return array(
    'access drupal project user data' =>  array(
      'title' => t('Access d.o. User data'),
      'description' => t('provides access to the data on path /drupal_org_user_data'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function drupal_org_user_data_menu() {
  $path = drupal_get_path('module', 'drupal_org_user_data');

  $items['drupal_org_user_data'] = array(
    'title' => 'Drupal.org User data look up',
    'page callback' => 'drupal_org_user_data_endpoint',
    'page arguments' => array(1,2),
    'access arguments' => array('access drupal project user data'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'drupal_org_user_data.pages.inc',
    'file path' => $path,
  );
  $items['drupal_org_user_data/%/json'] = array(
    'title' => 'JSON',
    'page callback' => 'drupal_org_user_data_endpoint',
    'page arguments' => array(1,2),
    'access arguments' => array('access drupal project user data'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'drupal_org_user_data.pages.inc',
    'file path' => $path,
  );
  $items['drupal_org_user_data/%/xml'] = array(
    'title' => 'XML',
    'page callback' => 'drupal_org_user_data_endpoint',
    'page arguments' => array(1,2),
    'access arguments' => array('access drupal project user data'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'drupal_org_user_data.pages.inc',
    'file path' => $path,
  );
  // only add yaml link if we support yaml
  if (function_exists('yaml_emit')) {
    $items['drupal_org_user_data/%/yaml'] = array(
      'title' => 'YAML',
      'page callback' => 'drupal_org_user_data_endpoint',
      'page arguments' => array(1,2),
      'access arguments' => array('access drupal project user data'),
      'type' => MENU_LOCAL_TASK,
      'file' => 'drupal_org_user_data.pages.inc',
      'file path' => $path,
    );
  }
  $items['admin/config/system/doud'] = array(
    'title' => 'd.o. project data',
    'description' => 'Drupal.org user project data',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drupal_org_user_data_rebuild_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'drupal_org_user_data.pages.inc',
    'file path' => $path,
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function drupal_org_user_data_block_info() {
  // This example comes from node.module.
  $blocks['drupal_org_impact'] = array(
    'info' => t('D.o impact data'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function drupal_org_user_data_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'drupal_org_impact':
      if (arg(0) != 'drupal_org_user_data') {
        $block['subject'] = t('d.o. impact');
        $extra = array();
        $data = _drupal_org_user_project_data(NULL, $extra);
        $block['content'] = _drupal_org_user_data_overview($data, $extra);
      }
    break;
  }
  return $block;
}

/**
 * return an overview of the data we recieved
 * @param  [type] $data [description]
 * @return [type]       [description]
 */
function _drupal_org_user_data_overview($data, $extra) {
  $header = array("projects", "commits", "downloads", "installs");
  $overview = array(0, 0, 0, 0);
  foreach ($data as $row) {
    $overview[0]++;
    $overview[1] += $row['commits'];
    $overview[2] += $row['downloads'];
    $overview[3] += $row['installs'];
  }
  // nicer numeric formatting
  foreach ($overview as $key => $item) {
    $overview[$key] = number_format($overview[$key]);
  }
  $content = theme('table', array('header' => $header, 'rows' => array($overview), 'caption' => t('Drupal.org user project overview data')));
  // alert that data still needs rebuilt
  if (isset($extra['rebuilding']) && count($data) != $extra['total']) {
    $content .= t('@remain projects still need their data rebuilt. Refresh the page for updated totals.', array('@remain' => $extra['total'] - count($data)));
  }

  return $content;
}

/**
 * Query d.o. for user data and return a
 * @return json a json representation of project data from d.o. based on user
 */
function _drupal_org_user_project_data($name = NULL, &$extra = array()) {
  // limit the number of items that are processed at once
  if (empty($name)) {
    $name = $GLOBALS['user']->name;
  }
  // ensure we got a real name
  if (empty($name)) {
    return array();
  }
  $cid = $name . '_project_array';
  // statically cache future calls
  $projects = &drupal_static($cid);
  if (isset($projects)) {
    return $projects;
  }
  else {
    // @ignore druplart_conditional_assignment
    if ($cache = cache_get($cid, 'cache_drupal_org_user_data')) {
      return $cache->data;
    }
  }
  // hit d.o. for data
  if (is_numeric($name)) {
    $response = _drupal_org_user_data_request(DRUPAL_ORG_USER_PATH . $name);
  }
  else {
    $response = _drupal_org_user_data_request(DRUPAL_ORG_NAME_PATH . $name);
  }
  if (!isset($response->error)) {
    $data = $response->data;
    // allow for custom modifications / pruning by users implementing this
    // step down to the part that has their projects
    // Create a DOM object.
    $html_obj = new simple_html_dom();
    // Load HTML from a string.
    $html_obj->load($data);
    // Remove all plain text fragments.
    $projects = array();
    $count = 0;
    $extra['total'] = count($html_obj->find('dd ul li'));
    foreach ($html_obj->find('dd ul li') as $plain_text_obj) {
      $tmp = $plain_text_obj->outertext;
      $split = explode('(', $tmp);
      $commits = explode(' ', array_pop($split));
      if (!empty($plain_text_obj->children(0)->innertext)) {
        $href = 'http://drupal.org' . $plain_text_obj->children(0)->href;
        $key = str_replace('http://drupal.org/project/', '', $href);
        $projects[$key] = array(
          'name' => $plain_text_obj->children(0)->innertext,
          'project' => $key,
          'href' => $href,
          'commits' => str_replace(',', '', $commits[0]),
          'downloads' => 0,
          'installs' => 0,
        );
        // scan deeper
        $html_obj2 = new simple_html_dom();
        // Load HTML from a string.
        $cached = FALSE;
        $response2 = _drupal_org_user_data_request($href, array(), $cached);
        $html_obj2->load($response2->data);
        foreach ($html_obj2->find('div[class="project-info item-list"] ul li') as $plain_text_obj2 ) {
          if (strpos($plain_text_obj2->innertext, 'Reported installs:') === 0) {
            $projects[$key]['installs'] = str_replace(',', '', $plain_text_obj2->children[0]->innertext);
          }
          if (strpos($plain_text_obj2->innertext, 'Downloads:') === 0) {
            $projects[$key]['downloads'] = str_replace(',', '', str_replace('Downloads: ', '', $plain_text_obj2->innertext));
          }
        }
        $html_obj2->clear();
        unset($html_obj2);
        // edge case, we haven't rebuilt the cache of the calls yet for the
        // end user so their requests will rebuild it. This only happens if
        // everything is flushed and hasn't been rebuilt yet we notify them
        // of the reason for the performance issues by only rebuilding a few
        // at a time, otherwise performance might be crippled.
        if (!$cached) {
          $count++;
        }
        if ($count == DRUPAL_ORG_MAX_PER_BUILD) {
          $extra['rebuilding'] = TRUE;
          $html_obj->clear();
          unset($html_obj);
          drupal_alter('drupal_org_user_projects', $projects, $name);
          return $projects;
        }
      }
      else {
        $extra['total']--;
      }
    }
    // Release resources to avoid memory leak in some versions.
    $html_obj->clear();
    unset($html_obj);
    drupal_alter('drupal_org_user_projects', $projects, $name);
    $extra['total'] = count($projects);
    // in this scenario we have all the project data parsed correctly
    // in this instance we should save the resulting project array as a cached
    // item to avoid needless further processing
    cache_set($cid, $projects, 'cache_drupal_org_user_data');
    return $projects;
  }
  else {
    return array();
  }
}

/**
 * Call wrapper to utilize http response caching to avoid massive pings
 * when we really don't need them. This build ontop of httprl and is taken
 * originally from work on _cis_connector_request.
 *
 * @param  string  $url     the address you want to request
 * @param  array   $options httprl options to pass in
 * @return string           whatever the response was, most likely text
 */
function _drupal_org_user_data_request($url, $options = array(), &$cached = FALSE) {
  $data = NULL;
  // statically cache future calls
  $data = &drupal_static($url);
  if (!isset($data)) {
    // convert to something db friendly
    $cid = $url;
    // @ignore druplart_conditional_assignment
    if ($cache = cache_get($cid, 'cache_drupal_org_user_data')) {
      $data = $cache;
      $cached = TRUE;
    }
    else {
      // queue request
      httprl_request($url, $options);
      // send the request off
      $tmp = httprl_send_request();
      $data = array_pop($tmp);
      cache_set($cid, $data->data, 'cache_drupal_org_user_data');
    }
  }
  else {
    $cached = TRUE;
  }
  /*
  // debug all calls
  // @ignore production_code
  if (module_exists('devel') && $GLOBALS['user']->uid == 1) {
    // @ignore production_code
    dpm($data);
  // @ignore production_code
  }
  */
  return $data;
}

/**
 * Helper function to export to a certain format.
 *
 * @return array encoded contents for export.
 */
function _drupal_org_user_data_encode($contents, $format = 'json') {
  switch ($format) {
    case 'json':
      return _drupal_org_user_data_pretty_json(drupal_json_encode($contents));
    break;
    case 'yaml':
      if (function_exists('yaml_emit')) {
        return yaml_emit($contents);
      }
    break;
    case 'xml':
      $xml = new SimpleXMLElement('<drupal_org_user_data/>');
      _drupal_org_user_data_array_to_xml($contents, $xml);
      return $xml->asXML();
    break;
  }
}

/**
 * Print json nicely regardless of PHP version
 */
function _drupal_org_user_data_pretty_json($json) {
  $result = '';
  $level = 0;
  $in_quotes = false;
  $in_escape = false;
  $ends_line_level = NULL;
  $json_length = strlen($json);
  for ($i = 0; $i < $json_length; $i++) {
    $char = $json[$i];
    $new_line_level = NULL;
    $post = "";
    if ($ends_line_level !== NULL) {
      $new_line_level = $ends_line_level;
      $ends_line_level = NULL;
    }
    if ($in_escape) {
      $in_escape = false;
    }
    else if ($char === '"') {
      $in_quotes = !$in_quotes;
    }
    else if (!$in_quotes) {
      switch ($char) {
        case '}':
        case ']':
          $level--;
          $ends_line_level = NULL;
          $new_line_level = $level;
        break;

        case '{':
        case '[':
          $level++;
        case ',':
          $ends_line_level = $level;
        break;

        case ':':
          $post = " ";
        break;

        case " ":
        case "\t":
        case "\n":
        case "\r":
          $char = "";
          $ends_line_level = $new_line_level;
          $new_line_level = NULL;
        break;
      }
    }
    else if ($char === '\\') {
      $in_escape = true;
    }

    if ($new_line_level !== NULL) {
        $result .= "\n".str_repeat("\t", $new_line_level);
    }
    $result .= $char . $post;
  }

  return $result;
}

/**
 * Helper function to convert array to XML
 * @param  array $array any old array
 * @param  object $xml   SimpleXMLElement object type
 * @return object        returns a populated XML object with values from array
 */
function _drupal_org_user_data_array_to_xml($array, &$xml) {
  foreach($array as $key => $value) {
    if(is_array($value)) {
      if(!is_numeric($key)){
        $subnode = $xml->addChild("$key");
        _drupal_org_user_data_array_to_xml($value, $subnode);
      }
      else {
        _drupal_org_user_data_array_to_xml($value, $xml);
      }
    }
    else {
      if(!is_numeric($key)){
        $xml->addChild("$key","$value");
      }
      else {
        $xml->addChild("num$key","$value");
      }
    }
  }
}

/**
 * Batch API call to process a user based on name supplied
 * @param  [type] $name [description]
 * @return [type]       [description]
 */
function _drupal_org_load_user_data_batch($name) {
  $batch = array(
    'operations' => array(),
    'finished' => '_drupal_org_user_projects_batch_finished',
    'title' => t('Loading project data...'),
    'init_message' => t('Preparing to request projects...'),
    'progress_message' => t('Requesting projects...'),
    'error_message' => t('Project request failed'),
  );
  // hit d.o. for data
  if (is_numeric($name)) {
    $response = _drupal_org_user_data_request(DRUPAL_ORG_USER_PATH . $name);
  }
  else {
    $response = _drupal_org_user_data_request(DRUPAL_ORG_NAME_PATH . $name);
  }
  if (!isset($response->error)) {
    $data = $response->data;
    // allow for custom modifications / pruning by users implementing this
    // step down to the part that has their projects
    // Create a DOM object.
    $html_obj = new simple_html_dom();
    // Load HTML from a string.
    $html_obj->load($data);
    // Remove all plain text fragments.
    $projects = array();
    $count = 0;
    foreach ($html_obj->find('dd ul li') as $plain_text_obj) {
      $tmp = $plain_text_obj->outertext;
      $split = explode('(', $tmp);
      $commits = explode(' ', array_pop($split));
      if (!empty($plain_text_obj->children(0)->innertext)) {
        $href = 'http://drupal.org' . $plain_text_obj->children(0)->href;
        $key = str_replace('http://drupal.org/project/', '', $href);
        $projects[] = array(
          'project' => $key,
          'href' => $href,
        );
      }
    }
    // Release resources to avoid memory leak in some versions.
    $html_obj->clear();
    unset($html_obj);
  }
  else {
    drupal_set_message(t('d.o. user does not exist'), 'error');
    return FALSE;
  }
  drupal_alter('drupal_org_user_projects', $projects);
  $batch['operations'][] = array(
    '_drupal_org_user_projects_batch_process', array($projects),
  );
  batch_set($batch);
}

/**
 * Batch API entity caching completion message.
 */
function _drupal_org_user_projects_batch_finished($success, $results, $operations) {
  drupal_set_message(t('Succesfully pulled all project data and cached results!'), 'status');
}

/**
 * Processes and loads cacheable information for entities into cache tables.
 */
function _drupal_org_user_projects_batch_process($initial_projects, &$context) {
  if (!isset($context['sandbox']['progress'])) {
    // Make some assumptions like entity ids must be a positive integer.
    $context['message'] = t("Begin requests");
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_id'] = 0;
    $context['sandbox']['max'] = count($initial_projects);
    $context['sandbox']['projects'] = $initial_projects;
  }
  $projects = &$context['sandbox']['projects'];
  $key = $context['sandbox']['current_id'];
  $context['message'] = t("Requesting project @project", array('@project' => $projects[$key]['project'] . ' ' . $projects[$key]['href']));
   // scan deeper
  $html_obj = new simple_html_dom();
  // Load HTML from a string.
  $href = $projects[$key]['href'];
  $response = _drupal_org_user_data_request($href);
  $context['sandbox']['current_id']++;
  if ($context['sandbox']['current_id'] == $context['sandbox']['max']) {
    $context['finished'] = TRUE;
    return;
  }
  $context['finished'] = min($context['sandbox']['current_id'] / $context['sandbox']['max'], 1.0);
}

/**
 * Implements hook_admin_menu_cache_info()
 */
function drupal_org_user_data_admin_menu_cache_info() {
  $caches['drupal_org_user_data'] = array(
    'title' => t('Clear d.o. user project data'),
    'callback' => 'drupal_org_invalidate_cache',
  );
  return $caches;
}
